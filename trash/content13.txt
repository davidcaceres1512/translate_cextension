// URL de tu servidor local de LibreTranslate
const translateApiUrl = 'http://localhost:5000/translate';

// Función para traducir el texto usando LibreTranslate
async function translateText(text, sourceLang = 'en', targetLang = 'es') {
  try {
    const response = await fetch(translateApiUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        q: text,
        source: sourceLang,
        target: targetLang,
      }),
    });

    if (!response.ok) {
      throw new Error('Error en la traducción');
    }

    const data = await response.json();
    return data.translatedText || '';  // Asegúrate de manejar el caso en que no haya traducción
  } catch (error) {
    console.error('Error al traducir el texto:', error);
    return null; // Retorna null en caso de error
  }
}

  // Función para asegurar que el contenedor del video tenga position: relative
  function ensureVideoContainerRelativePosition() {
    const videoElement = document.querySelector('video');
  
    if (videoElement) {
      // Selecciona el contenedor del video o el propio video
      const videoContainer = videoElement.parentElement;
  
      // Verifica si tiene position que no sea relative
      const computedStyle = window.getComputedStyle(videoContainer);
      console.log('computedStyle.position: ', computedStyle.position);
      if (computedStyle.position !== 'relative') {
        // Si no tiene position: relative, lo aplicamos (independientemente de si es static, absolute, etc.)
        videoContainer.style.position = 'relative';
        console.log("Position: relative aplicado al contenedor del video.");
      } else {
        console.log("El contenedor del video ya tiene position: relative.");
      }
    } else {
      console.log("No se encontró el elemento de video.");
    }
  }

// Función para procesar y traducir los subtítulos
async function processSubtitles() {

    // Asegurarse de que el contenedor del video tenga 'position: relative'
    ensureVideoContainerRelativePosition();

    const subtitleContainer = document.querySelector('.captions-display--captions-container--PqdGQ');
  
    if (subtitleContainer) {
      console.log('Contenedor de subtítulos encontrado.');
  
      const subtitleElement = subtitleContainer.querySelector('[data-purpose="captions-cue-text"]');
  
      if (subtitleElement) {
        const originalSubtitle = subtitleElement.innerText.trim();
        console.log('Texto del subtítulo original:', originalSubtitle);
  
        try {
          const translatedSubtitle = await translateText(originalSubtitle, 'en', 'es');
          if (translatedSubtitle === null) {
            console.warn('La traducción falló. No se creará un elemento traducido.');
            return; // Salir de la función en caso de error
          }
  
          console.log('Subtítulo traducido:', translatedSubtitle);
  
          // Obtiene el contenedor del video y su posición
          const videoElement = document.querySelector('video');
          const videoContainer = videoElement.parentElement;
          const videoRect = videoContainer.getBoundingClientRect();
  
          // Calcula la posición del subtítulo original
          const rect = subtitleElement.getBoundingClientRect();

          // Ajustar el z-index del subtítulo original para evitar interferencias
        subtitleElement.style.zIndex = '10';  // Ajusta este valor según sea necesario
  
          // Crea un nuevo elemento para mostrar el subtítulo traducido
          let translatedElement = document.createElement('div');
          translatedElement.style.fontSize = getComputedStyle(subtitleElement).fontSize;
          translatedElement.style.opacity = getComputedStyle(subtitleElement).opacity;
          translatedElement.style.color = 'yellow';
          translatedElement.style.position = 'absolute';
          translatedElement.style.left = `${Math.round(rect.left - videoRect.left)}px`; // Ajuste en relación al contenedor del video
          translatedElement.style.top = `${Math.round(rect.bottom - videoRect.top)}px`; // Ajuste en relación al contenedor del video
          translatedElement.style.width = `${Math.round(rect.width)}px`;
          translatedElement.style.height = `${Math.round(rect.height)}px`;
          translatedElement.style.textAlign = getComputedStyle(subtitleElement).textAlign;
          translatedElement.style.zIndex = '9999'; // Asegúrate de que el subtítulo traducido esté sobre el subtítulo original
          translatedElement.style.backgroundColor = 'rgba(0, 0, 0, 0.5)';
          translatedElement.className = 'translated-subtitle';
  
          translatedElement.innerText = translatedSubtitle;
  
          // Remueve cualquier subtítulo traducido previo
          const previousTranslation = subtitleElement.nextSibling;
          if (previousTranslation && previousTranslation.className === 'translated-subtitle') {
            previousTranslation.remove();
          }
  
          // Inserta el subtítulo traducido justo debajo del original
          subtitleElement.parentNode.insertBefore(translatedElement, subtitleElement.nextSibling);
        } catch (error) {
          console.error('Error al procesar el subtítulo:', error);
        }
      }
    } else {
      console.warn('Contenedor de subtítulos no encontrado. Reintentando...');
    }
  }
  
  // Configura el polling para verificar periódicamente
  const pollingInterval = 1000; // Intervalo en milisegundos (1 segundo)
  setInterval(processSubtitles, pollingInterval);
  