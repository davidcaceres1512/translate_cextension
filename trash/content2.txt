// content.js

// URL de tu servidor local de LibreTranslate
const translateApiUrl = 'http://localhost:5000/translate';
console.log('Este es un mensaje de content.js de la extension.');
// Función para traducir el texto usando LibreTranslate
async function translateText(text, sourceLang = 'en', targetLang = 'es') {
  try {
    const response = await fetch(translateApiUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        q: text,
        source: sourceLang,
        target: targetLang,
      }),
    });

    if (!response.ok) {
      throw new Error('Error en la traducción');
    }

    const data = await response.json();
    return data.translatedText;
  } catch (error) {
    console.error('Error al traducir el texto:', error);
    return null;
  }
}

// Función para observar cambios en los subtítulos
function observeSubtitles() {
  // Selecciona el contenedor de subtítulos
  const subtitleContainer = document.querySelector(
    '[data-purpose="captions-cue-text"]'
  );

  if (!subtitleContainer) {
    console.warn('Contenedor de subtítulos no encontrado');
    return;
  }

  // Observa cambios en los subtítulos
  const observer = new MutationObserver(async (mutationsList) => {
    for (const mutation of mutationsList) {
      if (mutation.type === 'childList') {
        const originalSubtitle = mutation.target.innerText;

        // Traduce el subtítulo
        const translatedSubtitle = await translateText(originalSubtitle, 'en', 'es');
        
        if (translatedSubtitle) {
          // Crea un nuevo elemento para mostrar el subtítulo traducido
          let translatedElement = document.createElement('div');
          translatedElement.style.fontSize = '1rem'; // Ajusta el tamaño de fuente para la traducción
          translatedElement.style.opacity = '0.75'; // Mantén la opacidad similar
          translatedElement.style.color = 'yellow'; // Cambia el color del texto traducido para diferenciarlo

          translatedElement.innerText = translatedSubtitle;

          // Remueve cualquier subtítulo traducido previo
          const previousTranslation = mutation.target.nextSibling;
          if (previousTranslation && previousTranslation.className === 'translated-subtitle') {
            previousTranslation.remove();
          }

          // Añade la clase personalizada para el subtítulo traducido
          translatedElement.className = 'translated-subtitle';

          // Inserta el subtítulo traducido justo debajo del original
          mutation.target.parentNode.insertBefore(translatedElement, mutation.target.nextSibling);
        }
      }
    }
  });

  // Configura el observer para observar cambios en los hijos del contenedor
  observer.observe(subtitleContainer, { childList: true, subtree: true });
}

// Ejecuta la observación de subtítulos cuando la página esté cargada
window.addEventListener('load', observeSubtitles);
