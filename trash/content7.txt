// URL de tu servidor local de LibreTranslate
const translateApiUrl = 'http://localhost:5000/translate';

// Función para traducir el texto usando LibreTranslate
async function translateText(text, sourceLang = 'en', targetLang = 'es') {
  try {
    const response = await fetch(translateApiUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        q: text,
        source: sourceLang,
        target: targetLang,
      }),
    });

    if (!response.ok) {
      throw new Error('Error en la traducción');
    }

    const data = await response.json();
    return data.translatedText || '';  // Asegúrate de manejar el caso en que no haya traducción
  } catch (error) {
    console.error('Error al traducir el texto:', error);
    return null;
  }
}

// Configura el MutationObserver para el contenedor de subtítulos
function setupSubtitleObserver(subtitleContainer) {
  console.log('Configurando observer para el contenedor de subtítulos.');

  const observer = new MutationObserver((mutationsList) => {
    console.log('MutationObserver detectó cambios en los subtítulos:', mutationsList);
    for (const mutation of mutationsList) {
      if (mutation.type === 'childList') {
        const originalSubtitle = mutation.target.innerText.trim();
        console.log('Texto del subtítulo original:', originalSubtitle);

        // Traduce el subtítulo
        translateText(originalSubtitle, 'en', 'es').then((translatedSubtitle) => {
          console.log('Subtítulo traducido:', translatedSubtitle);
          if (translatedSubtitle) {
            // Crea un nuevo elemento para mostrar el subtítulo traducido
            let translatedElement = document.createElement('div');
            translatedElement.style.fontSize = '1rem'; // Ajusta el tamaño de fuente para la traducción
            translatedElement.style.opacity = '0.75'; // Mantén la opacidad similar
            translatedElement.style.color = 'yellow'; // Cambia el color del texto traducido para diferenciarlo
            translatedElement.style.position = 'absolute'; // Asegúrate de que el nuevo subtítulo esté sobre el subtítulo original
            translatedElement.style.left = '0'; // Ajusta la posición si es necesario
            translatedElement.style.top = '0'; // Ajusta la posición si es necesario
            translatedElement.style.width = '100%'; // Ajusta el ancho para que cubra el subtítulo original

            translatedElement.innerText = translatedSubtitle;

            // Remueve cualquier subtítulo traducido previo
            const previousTranslation = mutation.target.nextSibling;
            if (previousTranslation && previousTranslation.className === 'translated-subtitle') {
              previousTranslation.remove();
            }

            // Añade la clase personalizada para el subtítulo traducido
            translatedElement.className = 'translated-subtitle';

            // Inserta el subtítulo traducido justo debajo del original
            mutation.target.parentNode.insertBefore(translatedElement, mutation.target.nextSibling);
          }
        });
      }
    }
  });

  // Configura el observer para observar cambios en los hijos del contenedor
  observer.observe(subtitleContainer, { childList: true, subtree: true });
}

// Función para observar cambios en el DOM general y encontrar el contenedor de subtítulos
function observeDOMChanges() {
  console.log('Observando cambios en el DOM general.');

  const domObserver = new MutationObserver((mutationsList) => {
    console.log('Cambios en el DOM detectados:', mutationsList);
    for (const mutation of mutationsList) {
      if (mutation.type === 'childList') {
        // Intenta encontrar el contenedor de subtítulos
        const subtitleContainer = document.querySelector('[data-purpose="captions-cue-text"]');
        if (subtitleContainer) {
          console.log('Contenedor de subtítulos encontrado.');
          domObserver.disconnect(); // Detiene la observación del DOM general
          setupSubtitleObserver(subtitleContainer); // Configura el observer para los subtítulos
          return; // Termina la función si el contenedor ha sido encontrado
        } else {
          console.log('Contenedor de subtítulos no encontrado aún.');
        }
      }
    }
  });

  // Comienza a observar el DOM en busca de cambios en los hijos
  domObserver.observe(document.body, { childList: true, subtree: true });
}

// Ejecuta la observación de cambios en el DOM cuando la página esté cargada
window.addEventListener('load', observeDOMChanges);
